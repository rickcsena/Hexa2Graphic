<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABGdBTUEAALGPC/xhBQAAABl0RVh0U29m
        dHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAABAySURBVHhe7Z29tdw4EoUnBIXw/HWetbY2gwlBIche
        S/4aE4K8dRXChKAQFIJCmL33LXpOqwQ1mgUSBMnvO+eemffHqi6hLkgQ7P4NAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9uWf//7vB+mL9F36
        605/Sh/KrwHAmVBzv5Qmv2/6mr5Jr+XPAODouKGlOOO3xNkAwNFRI7+TPKvXmvyRbBgv5TAAcETUxJ/u
        mnqp/iyHAYAjoiZeeuofxXoAwBFR874PzZzRp3I4ADgSbt7QzBl9KYcDgCOh5l3DAFgHADgial4MAOCq
        qHkxAICroubFAACuipoXAwC4KmpeDADgqqh5MQCAq6LmxQAAroqaFwMAuCpqXgwA4KqoeTEAgKui5sUA
        AK6KmhcDALgqal4MAOCqqHkxAICroubFAACuipoXAwC4KmpeDADgqqh5MQCAq6LmxQAAroqaFwMAuCpq
        XgwA4KqoeTEAgKui5sUAAK6KmhcDALgqal4MAOCqqHkxAICroubFAACuipoXAwC4KmpeDADgqqh5MQCA
        q6LmxQAAroqaFwMAuCpqXgwAducf//nXO+l36dMOctx3JZVroebFAGA33HjSZ+mvnfVd+kO6lhGoeTEA
        2AU122tpvFpD7qVv0mtJ8fyoeTEAGI6bTJqt+W9yXi8l1XOj5sUAYDhqsK93DTejrjGm1bwYAAxFzfUh
        NNusel9SPi9qXgwAhqLG+hIabVZ9LimfFzUvBgBDUWPNeu0f9a2kfF7UvBgADKXSaNOqpHxe1LwYAAyl
        1mizqqR8XtS8GAAMpdZos6qkfF7UvBgADEWNdZRFQAzgSWEA8DRqrKPcBsQAnhQGAItQc82+EehNJd3z
        oubFAGA4aq6ZtwL/rZLueVHzYgCwC2qw6U2gpHpe1LwYAOyGmuxFmuFx4KpKmudFzYsBwO6o2WwEHyW/
        Qcefd9p1raCkd17UvBgATIka0G8WggFsiZoXA4DpUPPt3vxWSee8qHkxAJgKNZ4vB6a4TVhSOi9qXgwA
        pkFNN9WdgZLWeVHzYgAwBWq46W4LltTOi5oXA4DdUbO9l6bbE1DSOy9qXgwAdkWNNu2zASXF86LmxQBg
        N9RkUz8YVNI8L2peDAB2QQ3mTT/VxptFJdXzoubFAGA4aq5pt//eq6R7XtS8GAAMRY01ovlXWVAsKZ8X
        NS8GAENQQ3l334h3A/ImIn/gZ+1ni1RSPy9qXgxgIzSAvKPNHzjph1puM5L/3987/4dO3KHXO2pr79t7
        +eu/vq1Y+/kivSV/ZtS8GMDKaOA8+4m3NoMP5c9Oi17j0OY3+n8M4BnUvBjAimjQ+NRz6fWnP5HWj8Ke
        7qOp9Zq8u29E8/9RQr6hrzGAZ1DzYgAroMGyxvWtjcOXB6f4ZFq9jlFbe386i9L3MIBnUPNiAJ1ooHj2
        Xnug+xLisOsEyn235jf6PgbwDGpeDCCJBogX+XwdXx08K8nH/72EPATOV9q6+X38X66f6GcYwDOoeTGA
        BBocW8z6j+R1Am+bnXqdoORYy39Nue6vJWQV/dyXZLW/XaKv5XDnRc2LASxAg2LErP9IHvzeQjvdOoFy
        mqL5b+j3bJq1YzwrPh78SV3CADQgZtu77nWCp5pha5THiNq4oZ9+vfpdn6XVjvOszr9XQ82LATTQQBh1
        KyurXdcJFHvE1l7Xf9Hlj39fyp4FfCmHOTdqXgzgARoI0z+xdqe3dYKS+hAUb8rmv6G/y9yNSMc7HGpe
        DKCCBoBXkWee9R/ptk6w2SD2saURayGO0fU69PdLTOA6zW/UvBjAHf7Hl7wZpzY4jijP0KsuGOp4rtEI
        c1xtEU7Hcs6uxa+MwGdPn8qvXwc1LwZQ0ADwrN+7cjyrPJN2L2rpGIdr/nt0XOfvf2efIVleKLzUg1k/
        oOa9vAFoAJxt1n+k9DqB/s6n0iMM8od9/S00/oaue5wKFe/SBqDB5l1rZ531H+ntlFd66npXv7fr1t5f
        obH3uYxBTCCDCndJA9BA86w/4s0pZpeb+uE6gX42e/PfhAksRUW7nAFooI3Yq35E2RB/uB7W197dt3Wt
        fPyn9zFovL3zmLsbf/fCBJaggl3GADTIvI13z1nfC3FHuLXoHN34U23tNRprbv6vd2Ovpj+k69zK60GF
        uoQBaJCNfnjnXo77saTiXLwKzeXHNs1/0zeJs4EWKtKpDUADbO+Hd9zo1etrf196dG/6zPJZxpLmf5Xc
        1LXx90hvRiBxRlBDhTmtAWiA7T3rP3Vdq9/zgqRX5K9yN8LNv6ghNcbWGKfnf7pvKSrK6QxAg8ur1nvP
        +qkZR3/n6+4zG8Hi5jcaY5e4VB2OinKqwmpweSatDbwRenrWb6HjeJ1gTxPbQmlj1BjDALZARTlFYTWw
        POvvucLunYSrX2fqmLd1glrMI6nr9FtjDAPYAhXl8IXV4Npz1vfp+uZ7yRXjtk5wxAXD7mtvjTEMYAtU
        lMMWVgNr74d3Npn1WyjmkdYJVnnCTmMMA9gCFeVwhdWg2vvhHV9qpGZ91Wo1w1AO3tE48zrBavfhVTcM
        YAtUlEMVVoNq71k/NaOpRt7E4h1qrteqm1SUk9c/ZlsnWHUTjuqFAWyBinKIwmpAzTDrp96AU/V5L9U2
        sXyXXP9VzgqUnxcM914ncOzV10RKnWL9lgoDiKgo0xdWA2rvh3fWmPUfadWGUb42yz3WCfxvlDLJFqoR
        BrAFKsq0hdVg8kDe++Gd1NtpqSa/S89uXd3sLoLyH7VOsFnzG9UIA9gCFWXKwmow7TnrO+7fD+8sQbXw
        rP/lrjbPaMRtRK+dbLVO4MujTT+oRDXCALZARZmqsB5I0p4r272zvq/razV6pM0N4IZfm+S1lLXMNbW1
        dymqEQawBSrKNIXVQJrmkd0l6PVnZv17DTOAG3qtvrxyvXvWCYY0v1GNMIAtUFF2L6wHkbTnrN+zR/2j
        lJn17zXcAO7Ra/eC4dL6+3JiSPMb1QgD2AIVZdfCehBJnklqg2xredbveninUouMdjWAG6rFM29Ukj5T
        6kE1wgC2QEXZ2wD2mvnTs/49lVpkNIUB3FBdvE7gywPXyP8+lmd8nykMm/XvUY0wgC1QUXYrbBlQtebc
        Ur7mXe2DNCu1yGgqA5gR1QgD2AIVZU8DGH2Pf/WHdyq1yAgDaKAaYQBboKLsaQC1Jt1CnvU3abJKLTLC
        ABqoRhjAFqgouxTWDXnXoFtq00d2K7XICANooBphAFugopzVANIP7yyhUouMhhqA4nnD0qY799ZG+WIA
        W6Ci7GUAfoS11rhraNjHPFdqkdFoA7h9qo4/Wmtzk1wD5YkBbIGKslthK43bqyGz/j2VWmS0lwHc5K9X
        uzOyBcoPA9gCFWVPA1jr4RRvThk2699TqUVGexvATd7R6LMCf5DGDznpa2939vsaeOejtz0PrbfjSbWc
        lwgDiKgoexrAGusA3qSy2/VspRYZzWIAS4QBnAEVZdfCqnmz7/Kzy5bUSKUWGWEADRwvxM8IA4ioKLsX
        Vo289FJg11n/nkotMsIAGjheiJ8RBhBRUaYorBr6mff296w/1Se+VmqREQbQwPFC/IwwgIiKMk1h1dy3
        N6u4f0DITe+v/XDKLg+iPKJSi4wwgAaOF+JnhAFEVBQK20GlFhlhAA0cL8TPCAOIqCgUtoNKLTLCABo4
        XoifEQYQUVEobAeVWmSEATRwvBA/IwwgoqKcprDKY+igNKEOWWEADRwvxM8IA4ioKIcvrOK/Sl+dS/nW
        MMrr7xUG0MDxQvyMMICIinLYwiqut6f+kH/50TDuY3cIA2jgeCF+RhhAREU5XGEVz43v/eo/ffJO+ZVh
        xPhJYQANHC/EzwgDiKgo0xRWx/HDJtV7/fr+i+Tn2P2wyi/fhrv8+jBqOSSEATRwvBA/IwwgoqLMZAC3
        47nBPUhvuo/1UOVQw6jlkBAG0MDxQvyMMICIijKjAaRVDjWMWg4JYQANHC/EzwgDiKgoGEAHtRwSwgAa
        OF6InxEGEFFRMIAOajkkhAE0cLwQPyMMIKKiYAAd1HJICANo4HghfkYYQERFwQA6qOWQEAbQwPFC/Iww
        gIiKggF0UMshIQyggeOF+BlhABEVBQPooJZDQhhAA8cL8TPCACIqCgbQQS2HhDCABo4X4meEAURUFAyg
        g1oOCWEADRwvxM8IA4ioKBhAB7UcEsIAGjheiJ8RBhBRUTCADmo5JIQBNHC8ED8jDCCiomAAHdRySAgD
        aOB4IX5GGEBERcEAOqjlkBAG0MDxQvyMMICIioIBdFDLISEMoIHjhfgZYQARFQUD6KCWQ0IYQAPHC/Ez
        wgAiKgoG0EEth4QwgAaOF+JnhAFEVBQMoINaDglhAA0cL8TPCAOIqCgYQAe1HBLCABo4XoifEQYQUVEw
        gA5qOSSEATRwvBA/IwwgoqJgAB3UckgIA2jgeCF+RhhAREXBADqo5ZAQBtDA8UL8jDCAiIqCAXRQyyEh
        DKCB44X4GWEAERUFA+iglkNCGEADxwvxM8IAIioKBtBBLYeEMIAGjhfiZ4QBRFQUDKCDWg4JYQANHC/E
        zwgDiKgoGEAHtRwSwgAaOF6InxEGEFFRMIAOajkkhAE0cLwQPyMMIKKiYAAd1HJICANo4HghfkYYQERF
        wQA6qOWQEAbQwPFC/IwwgIiKggF0UMshIQyggeOF+BlhABEVBQPooJZDQhhAA8cL8TPCACIqCgbQQS2H
        hDCABo4X4meEAURUFAygg1oOCWEADRwvxM8IA4ioKBhAB7UcEsIAGjheiJ8RBhBRUTCADmo5JIQBNHC8
        ED8jDCCiomAAHdRySAgDaOB4IX5GGEBERcEAOqjlkBAG0MDxQvyMMICIioIBdFDLISEMoIHjhfgZYQAR
        FQUD6KCWQ0IYQAPHC/EzwgAiKgoG0EEth4QwgAaOF+JnhAFEVBQMoINaDglhAA0cL8TPCAOIqCgYQAe1
        HBLCABo4XoifEQYQUVEwgA5qOSSEATRwvBA/IwwgoqJgAB3UckgIA2jgeCF+RhhAREXBADqo5ZAQBtDA
        8UL8jDCAiIqyRmG/Sx5Uvaode6lqx91StRyW6qtUO/ZW8r9XLY8l+ibVjr2VHK+WxxKtNU4f6Yv0UXpX
        WmxulOgaBoAQ+llDz5JSOMmQNEJoPfnsbt6zASWHASC0reZde1ByGABC2+tDabm5UGIYAELb61tpublQ
        YhgAQmP0WtpuHpQUBoDQGH0sbTcPSgoDQGiM5rst6KRCkgihbTSlAXwISSKEttF8dwKU1EtIEiG0jV5K
        282FEvMe5lrCCKF1NPVmoNeQLEJoXc13C/AeJchaAELbaM5dgBEnKq3xqChC6P+9dIzmv6GEvSj4ubwA
        hFBO7qE5F/2eQcm/k95LPivwXgGE0GO5V9wzx3gzEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAC/Hbb/8DOlPLW+LQKSAAAAAASUVORK5CYII=
</value>
  </data>
</root>